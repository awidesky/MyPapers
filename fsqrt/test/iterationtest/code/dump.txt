
my_asm_output.o:     file format pe-x86-64


Disassembly of section .text:

0000000000000000 <__tcf_0>:
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
   0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7 <__tcf_0+0x7>
   7:	e9 00 00 00 00       	jmp    c <__tcf_0+0xc>
   c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000010 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0>:
   *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
  10:	41 55                	push   %r13
  12:	41 54                	push   %r12
  14:	48 83 ec 28          	sub    $0x28,%rsp
    { return flush(__os.put(__os.widen('\n'))); }
  18:	48 8b 01             	mov    (%rcx),%rax
  1b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  1f:	4c 8b ac 01 f0 00 00 	mov    0xf0(%rcx,%rax,1),%r13
  26:	00 
    endl(basic_ostream<_CharT, _Traits>& __os)
  27:	49 89 cc             	mov    %rcx,%r12

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
  2a:	4d 85 ed             	test   %r13,%r13
  2d:	74 54                	je     83 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x73>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
  2f:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
  34:	74 1d                	je     53 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x43>
	  return _M_widen[static_cast<unsigned char>(__c)];
  36:	41 0f be 55 43       	movsbl 0x43(%r13),%edx
    { return flush(__os.put(__os.widen('\n'))); }
  3b:	4c 89 e1             	mov    %r12,%rcx
  3e:	e8 00 00 00 00       	call   43 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x33>
  43:	48 89 c1             	mov    %rax,%rcx
  46:	48 83 c4 28          	add    $0x28,%rsp
  4a:	41 5c                	pop    %r12
  4c:	41 5d                	pop    %r13
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
  4e:	e9 00 00 00 00       	jmp    53 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x43>
	this->_M_widen_init();
  53:	4c 89 e9             	mov    %r13,%rcx
  56:	e8 00 00 00 00       	call   5b <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x4b>
	return this->do_widen(__c);
  5b:	49 8b 45 00          	mov    0x0(%r13),%rax
  5f:	ba 0a 00 00 00       	mov    $0xa,%edx
  64:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 6b <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x5b>
  6b:	48 8b 40 30          	mov    0x30(%rax),%rax
  6f:	48 39 c8             	cmp    %rcx,%rax
  72:	74 c7                	je     3b <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x2b>
  74:	ba 0a 00 00 00       	mov    $0xa,%edx
  79:	4c 89 e9             	mov    %r13,%rcx
  7c:	ff d0                	call   *%rax
  7e:	0f be d0             	movsbl %al,%edx
  81:	eb b8                	jmp    3b <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x2b>
	__throw_bad_cast();
  83:	e8 00 00 00 00       	call   88 <_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0+0x78>
  88:	90                   	nop
  89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000090 <_Z6fsqrt_f>:
1.13 tiems faster
*/
float fsqrt_(float f) {

	int i = *(int *)&f;
	i = (i >> 1) + 0x1fbb67ae;
  90:	66 0f 7e c0          	movd   %xmm0,%eax
  94:	d1 f8                	sar    %eax
	float f1 = *(float *)&i;
  96:	05 ae 67 bb 1f       	add    $0x1fbb67ae,%eax
  9b:	66 0f 6e c8          	movd   %eax,%xmm1
	return 0.5F * (f1 + f / f1);
  9f:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  a3:	f3 0f 58 c1          	addss  %xmm1,%xmm0
  a7:	f3 0f 59 05 8c 00 00 	mulss  0x8c(%rip),%xmm0        # 13b <_Z7my_testv+0x8b>
  ae:	00 

}
  af:	c3                   	ret    

00000000000000b0 <_Z7my_testv>:


double my_test() { 
  b0:	41 55                	push   %r13
  b2:	41 54                	push   %r12
  b4:	56                   	push   %rsi
  b5:	53                   	push   %rbx
  b6:	48 83 ec 38          	sub    $0x38,%rsp
  ba:	0f 29 74 24 20       	movaps %xmm6,0x20(%rsp)

	auto start = std::chrono::high_resolution_clock::now();

	float max = 0.0F;
  bf:	66 0f ef f6          	pxor   %xmm6,%xmm6
	auto start = std::chrono::high_resolution_clock::now();
  c3:	e8 00 00 00 00       	call   c8 <_Z7my_testv+0x18>
  c8:	f3 0f 10 0d 8c 00 00 	movss  0x8c(%rip),%xmm1        # 15c <_Z7my_testv+0xac>
  cf:	00 
  d0:	48 89 c6             	mov    %rax,%rsi
	for (int i = 0x00800000 ; i < 0x7f800000 ; i++) {
  d3:	b8 00 00 80 00       	mov    $0x800000,%eax
  d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  df:	00 
	i = (i >> 1) + 0x1fbb67ae;
  e0:	89 c2                	mov    %eax,%edx
	return 0.5F * (f1 + f / f1);
  e2:	66 0f 6e c0          	movd   %eax,%xmm0
	for (int i = 0x00800000 ; i < 0x7f800000 ; i++) {
  e6:	83 c0 01             	add    $0x1,%eax
	i = (i >> 1) + 0x1fbb67ae;
  e9:	d1 fa                	sar    %edx
	float f1 = *(float *)&i;
  eb:	8d 9a ae 67 bb 1f    	lea    0x1fbb67ae(%rdx),%ebx
  f1:	66 0f 6e d3          	movd   %ebx,%xmm2
	return 0.5F * (f1 + f / f1);
  f5:	f3 0f 5e c2          	divss  %xmm2,%xmm0
  f9:	f3 0f 58 c2          	addss  %xmm2,%xmm0
  fd:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
 101:	f3 0f 5f c6          	maxss  %xmm6,%xmm0
 105:	0f 28 f0             	movaps %xmm0,%xmm6
	for (int i = 0x00800000 ; i < 0x7f800000 ; i++) {
 108:	3d 00 00 80 7f       	cmp    $0x7f800000,%eax
 10d:	75 d1                	jne    e0 <_Z7my_testv+0x30>
		float re = fsqrt_(f);
		if(max < re) max = re;

	}

	auto end1 = std::chrono::high_resolution_clock::now();
 10f:	e8 00 00 00 00       	call   114 <_Z7my_testv+0x64>
	__ostream_insert(__out, __s,
 114:	4c 8b 25 00 00 00 00 	mov    0x0(%rip),%r12        # 11b <_Z7my_testv+0x6b>
 11b:	41 b8 0d 00 00 00    	mov    $0xd,%r8d
 121:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 128 <_Z7my_testv+0x78>
 128:	48 89 c3             	mov    %rax,%rbx
 12b:	4c 89 e1             	mov    %r12,%rcx
 12e:	e8 00 00 00 00       	call   133 <_Z7my_testv+0x83>
	return _M_insert(static_cast<double>(__f));
 133:	4c 89 e1             	mov    %r12,%rcx
 136:	66 0f ef c9          	pxor   %xmm1,%xmm1
 13a:	f3 0f 5a ce          	cvtss2sd %xmm6,%xmm1
 13e:	e8 00 00 00 00       	call   143 <_Z7my_testv+0x93>
 143:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
 146:	48 8b 00             	mov    (%rax),%rax
 149:	48 8b 40 e8          	mov    -0x18(%rax),%rax
 14d:	4d 8b ac 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r13
 154:	00 
      if (!__f)
 155:	4d 85 ed             	test   %r13,%r13
 158:	74 6c                	je     1c6 <_Z7my_testv+0x116>
	if (_M_widen_ok)
 15a:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
 15f:	74 3a                	je     19b <_Z7my_testv+0xeb>
 161:	41 0f be 55 43       	movsbl 0x43(%r13),%edx
 166:	4c 89 e1             	mov    %r12,%rcx
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__cd;
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
 169:	48 29 f3             	sub    %rsi,%rbx
 16c:	e8 00 00 00 00       	call   171 <_Z7my_testv+0xc1>
 171:	48 89 c1             	mov    %rax,%rcx
    { return __os.flush(); }
 174:	e8 00 00 00 00       	call   179 <_Z7my_testv+0xc9>
 179:	90                   	nop

	std::cout << "mysqrt max : " << max << std::endl;
	return std::chrono::duration<double, std::milli>(end1 - start).count();
	
}
 17a:	0f 28 74 24 20       	movaps 0x20(%rsp),%xmm6
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 17f:	66 0f ef c0          	pxor   %xmm0,%xmm0
 183:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
 188:	f2 0f 5e 05 90 00 00 	divsd  0x90(%rip),%xmm0        # 220 <_Z8lib_testv+0x50>
 18f:	00 
 190:	48 83 c4 38          	add    $0x38,%rsp
 194:	5b                   	pop    %rbx
 195:	5e                   	pop    %rsi
 196:	41 5c                	pop    %r12
 198:	41 5d                	pop    %r13
 19a:	c3                   	ret    
	this->_M_widen_init();
 19b:	4c 89 e9             	mov    %r13,%rcx
 19e:	e8 00 00 00 00       	call   1a3 <_Z7my_testv+0xf3>
	return this->do_widen(__c);
 1a3:	49 8b 45 00          	mov    0x0(%r13),%rax
 1a7:	ba 0a 00 00 00       	mov    $0xa,%edx
 1ac:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1b3 <_Z7my_testv+0x103>
 1b3:	48 8b 40 30          	mov    0x30(%rax),%rax
 1b7:	48 39 c8             	cmp    %rcx,%rax
 1ba:	74 aa                	je     166 <_Z7my_testv+0xb6>
 1bc:	4c 89 e9             	mov    %r13,%rcx
 1bf:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
 1c1:	0f be d0             	movsbl %al,%edx
 1c4:	eb a0                	jmp    166 <_Z7my_testv+0xb6>
	__throw_bad_cast();
 1c6:	e8 00 00 00 00       	call   1cb <_Z7my_testv+0x11b>
 1cb:	90                   	nop
 1cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000001d0 <_Z8lib_testv>:

double lib_test() {
 1d0:	41 55                	push   %r13
 1d2:	41 54                	push   %r12
 1d4:	56                   	push   %rsi
 1d5:	53                   	push   %rbx
 1d6:	48 83 ec 48          	sub    $0x48,%rsp
 1da:	0f 29 74 24 20       	movaps %xmm6,0x20(%rsp)
 1df:	0f 29 7c 24 30       	movaps %xmm7,0x30(%rsp)

	auto start = std::chrono::high_resolution_clock::now();	

	float max = 0.0F;
 1e4:	66 0f ef ff          	pxor   %xmm7,%xmm7
	for (int i = 0x00800000 ; i < 0x7f800000 ; i++) {
 1e8:	bb 00 00 80 00       	mov    $0x800000,%ebx
	float max = 0.0F;
 1ed:	0f 28 f7             	movaps %xmm7,%xmm6
	auto start = std::chrono::high_resolution_clock::now();	
 1f0:	e8 00 00 00 00       	call   1f5 <_Z8lib_testv+0x25>
 1f5:	48 89 c6             	mov    %rax,%rsi
	for (int i = 0x00800000 ; i < 0x7f800000 ; i++) {
 1f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 1ff:	00 

		float f = *(float*) &i;
 200:	66 0f 6e c3          	movd   %ebx,%xmm0
		float re = sqrtf(f);
 204:	0f 2e f8             	ucomiss %xmm0,%xmm7
 207:	0f 87 d2 00 00 00    	ja     2df <_Z8lib_testv+0x10f>
 20d:	f3 0f 51 c0          	sqrtss %xmm0,%xmm0
		if(max < re) max = re;
 211:	f3 0f 5f c6          	maxss  %xmm6,%xmm0
	for (int i = 0x00800000 ; i < 0x7f800000 ; i++) {
 215:	83 c3 01             	add    $0x1,%ebx
		if(max < re) max = re;
 218:	0f 28 f0             	movaps %xmm0,%xmm6
	for (int i = 0x00800000 ; i < 0x7f800000 ; i++) {
 21b:	81 fb 00 00 80 7f    	cmp    $0x7f800000,%ebx
 221:	75 dd                	jne    200 <_Z8lib_testv+0x30>

	}

	auto end1 = std::chrono::high_resolution_clock::now();
 223:	e8 00 00 00 00       	call   228 <_Z8lib_testv+0x58>
	__ostream_insert(__out, __s,
 228:	4c 8b 25 00 00 00 00 	mov    0x0(%rip),%r12        # 22f <_Z8lib_testv+0x5f>
 22f:	41 b8 0d 00 00 00    	mov    $0xd,%r8d
 235:	48 8d 15 0e 00 00 00 	lea    0xe(%rip),%rdx        # 24a <_Z8lib_testv+0x7a>
 23c:	48 89 c3             	mov    %rax,%rbx
 23f:	4c 89 e1             	mov    %r12,%rcx
 242:	e8 00 00 00 00       	call   247 <_Z8lib_testv+0x77>
	return _M_insert(static_cast<double>(__f));
 247:	4c 89 e1             	mov    %r12,%rcx
 24a:	66 0f ef c9          	pxor   %xmm1,%xmm1
 24e:	f3 0f 5a ce          	cvtss2sd %xmm6,%xmm1
 252:	e8 00 00 00 00       	call   257 <_Z8lib_testv+0x87>
 257:	49 89 c4             	mov    %rax,%r12
    { return flush(__os.put(__os.widen('\n'))); }
 25a:	48 8b 00             	mov    (%rax),%rax
 25d:	48 8b 40 e8          	mov    -0x18(%rax),%rax
 261:	4d 8b ac 04 f0 00 00 	mov    0xf0(%r12,%rax,1),%r13
 268:	00 
      if (!__f)
 269:	4d 85 ed             	test   %r13,%r13
 26c:	74 7b                	je     2e9 <_Z8lib_testv+0x119>
	if (_M_widen_ok)
 26e:	41 80 7d 38 00       	cmpb   $0x0,0x38(%r13)
 273:	74 3f                	je     2b4 <_Z8lib_testv+0xe4>
 275:	41 0f be 55 43       	movsbl 0x43(%r13),%edx
 27a:	4c 89 e1             	mov    %r12,%rcx
	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
 27d:	48 29 f3             	sub    %rsi,%rbx
 280:	e8 00 00 00 00       	call   285 <_Z8lib_testv+0xb5>
 285:	48 89 c1             	mov    %rax,%rcx
    { return __os.flush(); }
 288:	e8 00 00 00 00       	call   28d <_Z8lib_testv+0xbd>
 28d:	90                   	nop

	std::cout << "stdlib max : " << max << std::endl;
	return std::chrono::duration<double, std::milli>(end1 - start).count();
	
}
 28e:	0f 28 74 24 20       	movaps 0x20(%rsp),%xmm6
 293:	0f 28 7c 24 30       	movaps 0x30(%rsp),%xmm7
	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 298:	66 0f ef c0          	pxor   %xmm0,%xmm0
 29c:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
 2a1:	f2 0f 5e 05 90 00 00 	divsd  0x90(%rip),%xmm0        # 339 <_Z8lib_testv+0x169>
 2a8:	00 
 2a9:	48 83 c4 48          	add    $0x48,%rsp
 2ad:	5b                   	pop    %rbx
 2ae:	5e                   	pop    %rsi
 2af:	41 5c                	pop    %r12
 2b1:	41 5d                	pop    %r13
 2b3:	c3                   	ret    
	this->_M_widen_init();
 2b4:	4c 89 e9             	mov    %r13,%rcx
 2b7:	e8 00 00 00 00       	call   2bc <_Z8lib_testv+0xec>
	return this->do_widen(__c);
 2bc:	49 8b 45 00          	mov    0x0(%r13),%rax
 2c0:	ba 0a 00 00 00       	mov    $0xa,%edx
 2c5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 2cc <_Z8lib_testv+0xfc>
 2cc:	48 8b 40 30          	mov    0x30(%rax),%rax
 2d0:	48 39 c8             	cmp    %rcx,%rax
 2d3:	74 a5                	je     27a <_Z8lib_testv+0xaa>
 2d5:	4c 89 e9             	mov    %r13,%rcx
 2d8:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
 2da:	0f be d0             	movsbl %al,%edx
 2dd:	eb 9b                	jmp    27a <_Z8lib_testv+0xaa>
		float re = sqrtf(f);
 2df:	e8 00 00 00 00       	call   2e4 <_Z8lib_testv+0x114>
 2e4:	e9 28 ff ff ff       	jmp    211 <_Z8lib_testv+0x41>
	__throw_bad_cast();
 2e9:	e8 00 00 00 00       	call   2ee <_Z8lib_testv+0x11e>
 2ee:	90                   	nop
 2ef:	90                   	nop

Disassembly of section .text$_ZNKSt5ctypeIcE8do_widenEc:

0000000000000000 <_ZNKSt5ctypeIcE8do_widenEc>:
       *
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */
      virtual char_type
      do_widen(char __c) const
   0:	89 d0                	mov    %edx,%eax
      { return __c; }
   2:	c3                   	ret    
   3:	90                   	nop
   4:	90                   	nop
   5:	90                   	nop
   6:	90                   	nop
   7:	90                   	nop
   8:	90                   	nop
   9:	90                   	nop
   a:	90                   	nop
   b:	90                   	nop
   c:	90                   	nop
   d:	90                   	nop
   e:	90                   	nop
   f:	90                   	nop

Disassembly of section .text.startup:

0000000000000000 <main>:


int main() {
   0:	41 55                	push   %r13
   2:	41 54                	push   %r12
   4:	53                   	push   %rbx
   5:	48 83 ec 50          	sub    $0x50,%rsp
   9:	0f 29 74 24 20       	movaps %xmm6,0x20(%rsp)
   e:	0f 29 7c 24 30       	movaps %xmm7,0x30(%rsp)
  13:	44 0f 29 44 24 40    	movaps %xmm8,0x40(%rsp)

		my_test();
		lib_test(); 
	}

	double my = 0.0, lib = 0.0;
  19:	66 0f ef f6          	pxor   %xmm6,%xmm6
	return __pf(*this);
  1d:	bb 0a 00 00 00       	mov    $0xa,%ebx
  22:	66 0f 28 fe          	movapd %xmm6,%xmm7
int main() {
  26:	e8 00 00 00 00       	call   2b <main+0x2b>
	__ostream_insert(__out, __s,
  2b:	4c 8b 25 00 00 00 00 	mov    0x0(%rip),%r12        # 32 <main+0x32>
  32:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  38:	48 8d 15 1c 00 00 00 	lea    0x1c(%rip),%rdx        # 5b <main+0x5b>
  3f:	4c 89 e1             	mov    %r12,%rcx
  42:	e8 00 00 00 00       	call   47 <main+0x47>
	return __pf(*this);
  47:	4c 89 e1             	mov    %r12,%rcx
  4a:	e8 10 00 00 00       	call   5f <main+0x5f>
		my_test();
  4f:	e8 b0 00 00 00       	call   104 <main+0x104>
		lib_test(); 
  54:	e8 d0 01 00 00       	call   229 <_Z8lib_testv+0x59>
		my_test();
  59:	e8 b0 00 00 00       	call   10e <main+0x10e>
		lib_test(); 
  5e:	e8 d0 01 00 00       	call   233 <_Z8lib_testv+0x63>
		my_test();
  63:	e8 b0 00 00 00       	call   118 <main+0x118>
		lib_test(); 
  68:	e8 d0 01 00 00       	call   23d <_Z8lib_testv+0x6d>
	__ostream_insert(__out, __s,
  6d:	41 b8 09 00 00 00    	mov    $0x9,%r8d
  73:	48 8d 15 25 00 00 00 	lea    0x25(%rip),%rdx        # 9f <main+0x9f>
  7a:	4c 89 e1             	mov    %r12,%rcx
  7d:	e8 00 00 00 00       	call   82 <main+0x82>
	return __pf(*this);
  82:	4c 89 e1             	mov    %r12,%rcx
  85:	e8 10 00 00 00       	call   9a <main+0x9a>

	std::cout << "\n\n* test\n" << std::endl;
	for(int i = 0 ; i < TESTS ; i++) {
  8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

		my += my_test();
  90:	e8 b0 00 00 00       	call   145 <main+0x145>
  95:	f2 0f 58 f8          	addsd  %xmm0,%xmm7
		lib += lib_test();
  99:	e8 d0 01 00 00       	call   26e <_Z8lib_testv+0x9e>
  9e:	f2 0f 58 f0          	addsd  %xmm0,%xmm6
	for(int i = 0 ; i < TESTS ; i++) {
  a2:	83 eb 01             	sub    $0x1,%ebx
  a5:	75 e9                	jne    90 <main+0x90>
	__ostream_insert(__out, __s,
  a7:	41 b8 0f 00 00 00    	mov    $0xf,%r8d
  ad:	48 8d 15 2f 00 00 00 	lea    0x2f(%rip),%rdx        # e3 <main+0xe3>
  b4:	4c 89 e1             	mov    %r12,%rcx
  b7:	e8 00 00 00 00       	call   bc <main+0xbc>
      { return _M_insert(__f); }
  bc:	66 0f 28 cf          	movapd %xmm7,%xmm1
  c0:	4c 89 e1             	mov    %r12,%rcx

	}

	std::cout << "\n\nmysqrt avg : " << (my / TESTS) << "ms\nstdlib avg : " << (lib / TESTS) << "ms" << "\n";
  c3:	f2 44 0f 10 05 98 00 	movsd  0x98(%rip),%xmm8        # 164 <main+0x164>
  ca:	00 00 
  cc:	f2 41 0f 5e c8       	divsd  %xmm8,%xmm1
  d1:	e8 00 00 00 00       	call   d6 <main+0xd6>
	__ostream_insert(__out, __s,
  d6:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  dc:	48 8d 15 3f 00 00 00 	lea    0x3f(%rip),%rdx        # 122 <main+0x122>
  e3:	48 89 c1             	mov    %rax,%rcx
      { return _M_insert(__f); }
  e6:	49 89 c5             	mov    %rax,%r13
	__ostream_insert(__out, __s,
  e9:	e8 00 00 00 00       	call   ee <main+0xee>
      { return _M_insert(__f); }
  ee:	66 0f 28 ce          	movapd %xmm6,%xmm1
  f2:	4c 89 e9             	mov    %r13,%rcx
  f5:	f2 41 0f 5e c8       	divsd  %xmm8,%xmm1
  fa:	e8 00 00 00 00       	call   ff <main+0xff>
	__ostream_insert(__out, __s,
  ff:	41 b8 02 00 00 00    	mov    $0x2,%r8d
 105:	48 8d 15 50 00 00 00 	lea    0x50(%rip),%rdx        # 15c <main+0x15c>
      { return _M_insert(__f); }
 10c:	49 89 c5             	mov    %rax,%r13
	__ostream_insert(__out, __s,
 10f:	48 89 c1             	mov    %rax,%rcx
 112:	e8 00 00 00 00       	call   117 <main+0x117>
 117:	4c 89 e9             	mov    %r13,%rcx
 11a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 120:	48 8d 15 53 00 00 00 	lea    0x53(%rip),%rdx        # 17a <main+0x17a>
 127:	e8 00 00 00 00       	call   12c <main+0x12c>
 12c:	41 b8 0b 00 00 00    	mov    $0xb,%r8d
 132:	48 8d 15 55 00 00 00 	lea    0x55(%rip),%rdx        # 18e <main+0x18e>
 139:	4c 89 e1             	mov    %r12,%rcx
 13c:	e8 00 00 00 00       	call   141 <main+0x141>
      { return _M_insert(__f); }
 141:	66 0f 28 ce          	movapd %xmm6,%xmm1
 145:	4c 89 e1             	mov    %r12,%rcx
 148:	f2 0f 5e cf          	divsd  %xmm7,%xmm1
 14c:	e8 00 00 00 00       	call   151 <main+0x151>
	__ostream_insert(__out, __s,
 151:	41 b8 23 00 00 00    	mov    $0x23,%r8d
 157:	48 8d 15 68 00 00 00 	lea    0x68(%rip),%rdx        # 1c6 <_GLOBAL__sub_I__Z6fsqrt_f+0x36>
      { return _M_insert(__f); }
 15e:	49 89 c4             	mov    %rax,%r12
	__ostream_insert(__out, __s,
 161:	48 89 c1             	mov    %rax,%rcx
 164:	e8 00 00 00 00       	call   169 <main+0x169>
	return __pf(*this);
 169:	4c 89 e1             	mov    %r12,%rcx
 16c:	e8 10 00 00 00       	call   181 <main+0x181>
 171:	90                   	nop
	std::cout << "my sqrt is " << (lib/my) << " times faster than standard library" <<std::endl;

 172:	0f 28 74 24 20       	movaps 0x20(%rsp),%xmm6
 177:	0f 28 7c 24 30       	movaps 0x30(%rsp),%xmm7
 17c:	31 c0                	xor    %eax,%eax
 17e:	44 0f 28 44 24 40    	movaps 0x40(%rsp),%xmm8
 184:	48 83 c4 50          	add    $0x50,%rsp
 188:	5b                   	pop    %rbx
 189:	41 5c                	pop    %r12
 18b:	41 5d                	pop    %r13
 18d:	c3                   	ret    
 18e:	66 90                	xchg   %ax,%ax

0000000000000190 <_GLOBAL__sub_I__Z6fsqrt_f>:
 190:	48 83 ec 28          	sub    $0x28,%rsp
 194:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 19b <_GLOBAL__sub_I__Z6fsqrt_f+0xb>
 19b:	e8 00 00 00 00       	call   1a0 <_GLOBAL__sub_I__Z6fsqrt_f+0x10>
 1a0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1a7 <_GLOBAL__sub_I__Z6fsqrt_f+0x17>
 1a7:	48 83 c4 28          	add    $0x28,%rsp
 1ab:	e9 00 00 00 00       	jmp    1b0 <_GLOBAL__sub_I__Z6fsqrt_f+0x20>
