

#include <benchmark/benchmark.h>
#include <cmath>

// Type your code here, or load an example.
float sqrtn(const float f) {
	int i = *(int *)&f;
	i = (i >> 1) + 0x1fbb67ae;
	float f1 = *(float *)&i;
	return 0.5F * (f1 + f / f1);
}

void Q_sqrt(benchmark::State& state) {
  // Perform setup here
  volatile float f = 0.35f;
  for (auto _ : state) {
    sqrtn(f);
  }
}

void std_sqrt(benchmark::State& state) {
  // Perform setup here
  volatile float f = 0.35f;
  for (auto _ : state) {
    std::sqrtf(f);
  }
}
// Register the function as a benchmark
BENCHMARK(Q_sqrt);
BENCHMARK(std_sqrt);
// Run the benchmark
//BENCHMARK_MAIN();







#include <benchmark/benchmark.h>
#include <cmath>

// Type your code here, or load an example.
float sqrtn(const float f) {
	int i = *(int *)&f;
	i = (i >> 1) + 0x1fbb67ae;
	float f1 = *(float *)&i;
	return 0.5F * (f1 + f / f1);
}

void Q_sqrt(benchmark::State& state) {
	float max = 0.0F;
	for (int i = 0x00800000 ; i < 0x50800000 ; i++) {

		float f = *(float*) &i;
		float re = sqrtn(f);
		if(max < re) max = re;

	}
}

void std_sqrt(benchmark::State& state) {
	float max = 0.0F;
	for (int i = 0x00800000 ; i < 0x50800000 ; i++) {

		float f = *(float*) &i;
		float re = sqrtf(f);
		if(max < re) max = re;

	}
}
// Register the function as a benchmark
BENCHMARK(Q_sqrt);
BENCHMARK(std_sqrt);
// Run the benchmark
//BENCHMARK_MAIN();